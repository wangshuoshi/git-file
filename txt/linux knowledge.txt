update用来更新软件列表，upgrade用来更新软件。
Sudo apt-get update 
Pip
安装Pip install package     升级pip install   -u package
Wget
是一个从网络上自动下载文件的自由工具。它支持HTTP，HTTPS和FTP协议，可以使用HTTP代理. 
下载整个http或者ftp站点。wget http://place.your.url/here
当文件特别大或者网络特别慢的时候，往往一个文件还没有下载完，连接就已经被切断，此时就需要断点续传。wget的断点续传是自动的，只需要使用-c参数，例如：
wget -c http://the.url.of/incomplete/file
如果有多个文件需要下载，那么可以生成一个文件，把每个文件的URL写一行，例如生成文件download.txt，然后用命令：wget -i download.txt

使某进程运行再1,2核心 taskset -p 某进程号 -c 1,2

直接从物理内存读写数据要比从硬盘读写数据要快的多因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，
这样就引出了物理内存与虚拟内存的概念。
物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存的磁盘空间被称
为交换空间（Swap Space）。
作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换
空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理
内存。
linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自
动交换到虚拟内存中，而将经常使用的信息保留到物理内存。
一、Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内
存页面。这可以避免等待交换所需的时间。
二、linux进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经
常使用的页面文件交换到虚拟内存

free： 监控内存 -m：以M为单位查看内存使用情况（默认为kb） -b：以字节为单位查看内存使用情况
total：物理内存的总大小。 
used：已经使用的物理内存多小。 
free：空闲的物理内存值。 
shared：多个进程共享的内存值。
buffers/cached：磁盘缓存的大小。 
第二行Mem：代表物理内存使用情况。
第三行(-/+ buffers/cached)：代表磁盘缓存使用状态。
第四行：Swap表示交换空间内存使用状态

buffers主要用来存放目录里面有什么内容，文件的属性以及权限等等。而cached直接用来记忆我们打开过的文件和程序

          ################################## top #####################################
top命令最具有大局观
top - 02:25:39 up 13 days, 23:02,  2 users,  load average: 0.00, 0.01, 0.05
Tasks: 196 total,   1 running, 195 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem : 16432208 total,  1450364 free,  1328792 used, 13653052 buff/cache
KiB Swap:        0 total,        0 free,        0 used. 14941748 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                          
21027 root      20   0 1855184 755284  13144 S   0.7  4.6   1:02.20 qemu-system-x86
task：total进程总数 running正在运行的进程数 sleeping睡眠的进程数 stopped停止的进程数 zombie僵尸进程数
%CPU利用率小于或等于业界境界范围75%  sys%小于或等于30%  wait%小于或等于5% user time% 如果持续超过90%可能是复杂算法、不合理代码导致
%MEM不大于80%（可用的memory=free memory+buffers+cached） 
SWAP区域，当开始使用swap的时候说明内存已经不足成为瓶颈
         ################################# vmstat #####################################
vmstat
vm侧重内存，cache，buffer和设备间的数据交互，能暴露的问题最多
vmstat 1  1表示每秒采集一次   vmstat 2 1  2表示2秒采集一次，1表示只采集一次
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 1450800 168804 13484284    0    0     1     2    3    2  0  0 100  0  0

Procs r:运行队列中进程数量,这个值也可以判断是否需要增加CPU b:等待IO的进程数量
Swap si:每秒从交换区写到内存的大小,由磁盘调入内存 so:每秒写入交换区的内存大小,由内存调入磁盘。
IO（现在的Linux版本块的大小为1kb）bi:每秒读取的块数 bo:每秒写入的块数
system in:每秒中断数,包括时钟中断 
cs:每秒上下文切换数上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的
        ################################## iostat ####################################
iostat -x  展示更多信息   也可以是 iostat /dev/sda
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.27    0.00    0.18    0.00    0.00   99.54
Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
sda         0.00     0.12    0.07    0.29     6.24    13.09   106.86     0.00    8.73    1.77   10.45   0.76   0.03
%user用户空间占用CPU百分比 %nice用户进程空间内改变过优先级的进程占用CPU百分比
%system内核空间占用CPU百分比 %iowaitIO等待占用百分比,iowait% <20%良好
%steal虚拟机占用百分比 %idle 空闲百分比
%util一秒中有百分之多少的时间用于I/O操作   %util很大 超过80%不好
await:平均每次设备I/O操作的等待时间(毫秒) svctm:平均每次设备I/O操作的服务时间(毫秒) svctm越接近于await则说明等待时间少

#用户态  内核态  上下文
虚拟内存：
Linux虚拟内存的大小为2^32=4GB(在32位的x86机器上)内核将这4G字节的空间分为两部分.最高的1G字节,供内核使用，称为“内核空间”.
而较低的3G字节,也就是说,在这4G的内存中,0-3G是给用户留下的用户空间,这段空间是各个进程独立,无法互相访问的,3-4G是进程的内核空间,
每个进程可以通过系统调用进入内核,因此,Linux内核空间由系统内的所有进程共享.于是,从具体进程的角度来看,每个进程可以拥有4G字节的
虚拟地址空间(也叫虚拟内存).
在这个虚拟内存中分配的地址并不是其真实的物理地址,一个可执行文件在被编译后会被分配成很多页,在这个在文件执行的过程中,它往内存中装载的
单位就是页.当一个文件被执行时,操作系统会先为该程序创建一个4GB的进程虚拟地址空间.虚拟地址空间只是一个中间层而已,它的功能是利用一种
映射机制(内存管理单元(MMU))将虚拟地址空间映射到物理地址空间,所以创建4GB虚拟地址空间其实并不是要真的创建空间,只是要创建那种映射机制
所需要的数据结构而已,这种数据结构就是页目和页表.
虚拟内存优势：
1、它避免了多个进程访问到同一用户地址空间,避免有些程序恶意修改其它程序.通过虚拟内存的管理也可以控制物理内存的访问权限.
2、通过这种映射机制,给分配和释放内存带来了方便,通过页面调度避免了大量数据的装入装出,提高了内存效率

内存管理单元MMU:
因为Flash和ROM速度相较于RAM和CPU来说速度比较慢,处理器的程序指针从0x0处启动,顺序执行程序,属于非易失性存储器空间范围.
如果把真正的应用程序下载到SDRAM中运行,其他的放在Flash中执行,那么如果发生了中断,PC将指向0x18(处理终端的一个地址),而此时0x18处仍为
非易失性存储器所占据的位置,则程序的执行还是有一部分要在FLASH或者ROM中来执行的.
如果引用了MMU可把SDRAM的地址完全映射到0x0起始的一片连续地址空间，而把原来占据这片空间的FLASH或者ROM映射到其它不相冲突的存储空间位置.
FLASH的地址从0x0000_0000－0x00ff_ffff,而SDRAM的地址范围是0x3000_0000－0x31ff_ffff，
则可把SDRAM地址映射为0x0000_0000－0x1fff_ffff而FLASH的地址可以映射到0x9000_0000－0x90ff_ffff(此处地址空间为空闲,未被占用).
映射完成后如果处理器发生异常,假设依然为IRQ中断,PC指针指向0x18处的地址.

cpu发给mmu的是虚拟地址，mmu然后再把虚拟地址映射为物理地址
MMU将虚拟地址映射到物理地址是以页（ Page） 为单位的

用户态、内核态：
进程工作在内核空间下就叫用户态,进程工作在内核空间下就叫内核态.当一个任务(进程)执行系统调用而陷入内核代码中执行时,我们就称进程处在
内核状态,此时处理器处于特权级最高的(0级)内核代码.当进程处于内核态时,执行的内核代码会使用当前的内核栈.每个进程都有自己的内核栈.所谓
内核栈(Linux中每个进程有两个栈，分别用于用户态和内核态的进程执行，其中的内核栈就是用于内核态的堆栈)当进程在执行用户自己的代码时,则
称其处于用户态.即此时处理器在特权级最低的用户代码中运行.当正在执行用户程序而突然中断时,此时用户程序也可以象征性地处于进程的内核态,
因为中断处理程序将使用当前进程的内核态.
进程在用户态下是没法访问到内核空间中的数据的,好处就是:通过内核态和用户态就产生了一个保护机制,用户无法随意的进入所有进程共享的内核空间.
用户安全的访问内核空间,操作系统提供了以下几种方式:
1、调用write(),read(),send()等IO函数等操作
2、异常:当CPU在执行运行在用户态的程序时,发现了某些事件不可知的异常,这是会触发由当前运行进程切换到处理此异常的内核相关程序中,也就到了
内核态,比如缺页异常.
3、外围设备的中断:当外围设备完成用户请求的操作之后,会向CPU发出相应的中断信号,这时CPU会暂停执行下一条将要执行的指令转而去执行中断信号的处理程序.

上下文:
所谓的进程上下文,就是一个进程传递给内核的那些参数和CPU的所有寄存器的值、进程的状态以及堆栈中的内容,也就进程在进入内核态之前的运行环境.
所以在切换到内核态时需要保存当前进程的所有状态,即保存当前进程的上下文,以便再次执行该进程时,能够恢复切换时的状态继续执行.同理,硬件通过
触发信号 导致内核调用 中断 处理程序进入内核空间.这个过程中,硬件的一些变量和参数也要传递给内核,内核通过这些参数进行中断处理,中断上下文
就可以理解为硬件传递过来的这些参数和内核需要保存的一些环境(主要是被中断的进程的环境).
进程上下文切换分为 进程调度时 和 系统调用时 两种切换,消耗资源不同.
当发生进程调度时,进行进程切换就是上下文切换(context switch).操作系统必须对上面提到的全部信息进行切换,新调度的进程才能运行.
而系统调用进行的模式切换(mode switch)与进程切换比较起来容易很多,而且节省时间,因为模式切换最主要的任务只是切换进程寄存器上下文的切换.


访问IO端口有2种途径：I/O映射方式（I/O－mapped）、内存映射方式（Memory－mapped）。
前一种途径不映射到内存空间，直接使用 intb()/outb()之类的函数来读写IO端口；后一种MMIO是先把IO端口
映射到IO内存（“内存空间”），再使用访问IO内存的函数来访问 IO端口。

BAR空间是再硬盘controller里面的存储着
BAR寄存器存储的总线地址，应用程序是不能直接利用的，应用程序首先要做的就是读出BAR寄存器的值，然后用mmap函数建立应用程序
内存空间和总线地址空间的映射关系。这样应用程序往PCIE设备内存读写数据的时候，直接利用PCIE设备映射到应用程序中的内存地址即可。

1、栈区（stack）—   由编译器自动分配释放，存放函数的参数值，局部变量的值等。其  
   操作方式类似于数据结构中的栈。  
2、堆区（heap）   —   一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回  
   收   。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。  
3、全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的  
   全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另  
   一块区域。   -   程序结束后由系统释放。  
4、文字常量区   —常量字符串就是放在这里的。程序结束后由系统释放  
5、程序代码区—存放函数体的二进制代码
