extern int i; //声明，不是定义  extern int a 其中变量 a 可以在别的文件中定义的
extern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。
int i; //声明，也是定义   int a 在声明的时候就已经建立了存储空间

定义常量
在 C 中，有两种简单的定义常量的方式：
使用 #define 预处理器   #define LENGTH 10 
使用 const 关键字  const int  LENGTH = 10;

auto 存储类是所有局部变量默认的存储类
register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于
寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）。
static 存储类指示编译器在程序的生命周期内保持局部变量的存在

int max(int num1, int num2) 
{
   /* 局部变量声明 */
   int result;
   if (num1 > num2)
      result = num1;
   else
      result = num2;
   return result; 
}

balance[4] = 50.0 所有的数组都是以 0 作为它们第一个元素的索引

enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
};
enum DAY day;
enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
} day;
enum season {spring, summer=3, autumn, winter};代表是值  switch的也是值
没有指定值的枚举元素，其值为前一元素加 1。也就说 spring 的值为 0，summer 的值为 3，autumn 的值为 4，winter 的值为 5

&var1  var1的地址
int  *ip;        /* 指针变量的声明 */
ip = &var;
*ip 找的是var的值
*ptr = NULL  ip=0x0
int (* p)(int, int) = & max; max是函数

strlen(HelloWorld) :  10  字符串是以\0结尾的，但是strlen不会把这个长度算进去

结构体
struct SIMPLE
{
    int a;
    char b;
    double c;
};
//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3
struct SIMPLE t1, t2[20], *t3;
 
//也可以用typedef创建新类型
typedef struct
{
    int a;
    char b;
    double c; 
} Simple2;
//现在可以用Simple2作为类型声明新的结构体变量
Simple2 u1, u2[20], *u3;

struct Books Book1;
Book1.title

位域         说的是字节
main(){
    struct bs{
        unsigned a:1;
        unsigned b:3;
        unsigned c:4;
    } bit,*pbit;
    bit.a=1;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
    bit.b=7;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
    bit.c=15;    /* 给位域赋值（应注意赋值不能超过该位域的允许范围） */
    printf("%d,%d,%d\n",bit.a,bit.b,bit.c);    /* 以整型量格式输出三个域的内容 */
    pbit=&bit;    /* 把位域变量 bit 的地址送给指针变量 pbit */
    pbit->a=0;    /* 用指针方式给位域 a 重新赋值，赋为 0 */
    pbit->b&=3;    /* 使用了复合的位运算符 "&="，相当于：pbit->b=pbit->b&3，
    位域 b 中原有值为 7，与 3 作按位与运算的结果为 3（111&011=011，十进制值为 3） */
    pbit->c|=1;    /* 使用了复合位运算符"|="，相当于：pbit->c=pbit->c|1，其结果为 15 */
    printf("%d,%d,%d\n",pbit->a,pbit->b,pbit->c);    /* 用指针方式输出了这三个域的值 */
}

#include <stdio.h>
#include <string.h>
struct
{
  unsigned int age : 3;
} Age;
 
int main( )
{
   Age.age = 4;
   printf( "Sizeof( Age ) : %d\n", sizeof(Age) );
   printf( "Age.age : %d\n", Age.age );

   Age.age = 8; // 二进制表示为 1000 有四位，超出        说的是字节
   printf( "Age.age : %d\n", Age.age );
   
   return 0;
}
Sizeof( Age ) : 4
Age.age : 4
Age.age : 0

#include <stdio.h>
#include <string.h>
 
共用体        只能这样赋值，如果一起赋值然后在调用，会损坏，会以最后一次为准
union Data
{
   int i;
   float f;
   char  str[20];
};
int main( )
{
   union Data data;        
   data.i = 10;
   printf( "data.i : %d\n", data.i);
   data.f = 220.5;
   printf( "data.f : %f\n", data.f);
   strcpy( data.str, "C Programming");
   printf( "data.str : %s\n", data.str);
   return 0;
}

