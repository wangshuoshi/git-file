CREATE DATABASE 数据库名称 DEFAULT CHARSET utf8 COLLATE utf8_general_ci

create table 表名(
    列名  类型  是否可以为空，
    列名  类型  是否可以为空
)ENGINE=InnoDB DEFAULT CHARSET=utf8

改
update 表 set name ＝ 'alex' where id>1

自增
auto_increment
primary key
分页 limit  select * from 表 limit 4,5
like查询
select * from table1 where name like ‘%[!0-9]%’

delete命令删除的数据将存储在系统回滚段中，需要的时候，数据可以回滚恢复,DELETE的仍保留原来的最大数值
truncate table命令将快速删除数据表中的所有记录，但保留数据表结构,TRUNCATE之后的自增字段从头开始计数了

主键
nid int not null auto_increment primary key
primary key(nid,num)
alter table 表名 add primary key(列名);

外键
constraint fk_cc foreign key (color_id) references color(nid)
alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);

索引
index ix_name (name)
create index index_name on table_name(column_name)
create index ix_name_email on in3(name,email);（组合索引）

排序
group by 必须在where之后，order by之前

ORM
user_info_objs = models.UserInfo.objects.all()             manytomany在group里面
group_obj = models.UserGroup.objects.get(caption='CEO')
user_info_obj.usergroup_set.add(group_obj)  查询另外一张表  所以用_set
user_info_obj.usergroup_set.all().filter(caption='CEO') 查询另外一张表
group_obj.user_info.all().filter(id=1)    因为manytomany在group那里，所以当用group查询时可以直接这样查询

触发器
触发器无法由用户直接调用，而知由于对表的【增/删/改】操作被动引发的
删除触发器DROP TRIGGER tri_after_insert_tb1;
delimiter //
CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW         ！！！
BEGIN
IF NEW. NAME == 'alex' THEN
    INSERT INTO tb2 (NAME)
VALUES
    ('aa')
END
END//
delimiter ;

存储过程 没有返回值但可以有sql语句  函数有返回值,但不能写sql语句
-- 创建存储过程  @用于out和inout
delimiter \\
create procedure p1(
    in i1 int,
    in i2 int,
    inout i3 int,
    out r1 int
)
BEGIN
    DECLARE temp1 int;
    DECLARE temp2 int default 0;   
    set temp1 = 1;
    set r1 = i1 + i2 + temp1 + temp2;   
    set i3 = i3 + 100;
end\\
delimiter ;
-- 执行存储过程
set @t1 =4;    @代表能out的
set @t2 = 0;
CALL p1 (1, 2 ,@t1, @t2);
SELECT @t1,@t2;

pymsql执行sql存储
import pymysql
conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='123', db='t1')
cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
# 执行存储过程
cursor.callproc('p1', args=(1, 22, 3, 4))
# 获取执行完存储的参数
cursor.execute("select @_p1_0,@_p1_1,@_p1_2,@_p1_3")
result = cursor.fetchall()
conn.commit()            #有增删的时候一定要执行这句话
cursor.close()
conn.close()
print(result)

函数
delimiter \\
create function f1(
    i1 int,
    i2 int)
returns int          #需要returns 类型
BEGIN
    declare num int;
    set num = i1 + i2;
    return(num);
END \\
delimiter ;

索引
create unique index 索引名 on 表名(列名)

视图
CREATE VIEW v1 AS 
SELET nid, 
    name
FROM
    A
WHERE
    nid > 4
使用视图select * from v1

F查询
from django.db.models import F
a.objects.filter(aa__gt=F('bb'))
Q查询
a.objects.filter((Q(name__startwith='张'),Q(id__gt=4))|Q(price__gt=10000))

数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行

采用B+tree来进行索引
B树
  每个节点都存储key和data，所有节点组成这棵树，并且叶子节点指针为null
  每个节点有M-1个key，并且以升序排列
B+树
  只有叶子节点存储data，叶子节点包含了这棵树的所有键值，叶子节点不存储指针后来，在B+树上增加了顺序访问指针，也就是每
  个叶子节点增加一个指向相邻叶子节点的指针，这样一棵树成了数据库系统实现索引的首选数据结构。（也可以理解位树的所有叶结点
  构成一个有序链表，可以按照关键码排序的次序遍历全部记录）
索引查找时产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标
就是在查找过程中磁盘I/O操作次数的时间复杂度。树高度越小，I/O次数越少。
  MyISAM 
  data存的是数据地址。索引是索引，数据是数据
  InnoDB(首选搜索引擎)
  data存的是数据本身。索引也是数据
B+树的优点：1、由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。
           2、数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率
           3、B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序
           排列并且相连，所以便于区间查找和搜索。
B树的优点：B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速
  
all和index效率不高
如果是范围查询而且是索引的话，explain会走range，（但是!=和>不走索引）如果不是索引，则会走全表扫描。
但是，如果是主键索引，!=和>会走索引 如果一个列是纯数字的话也会走索引
如果是like  nnn%走索引   %nnn不走索引
当用or的时候，只要有一个列不是索引，则不走索引
如果一个列是索引，但是用的时候数据类型不一样，则不走索引

InnoDB：
采用b+树
在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构
是一种"聚集"索引，数据行和相邻的键值紧凑地存储在一起
支持事务处理等
不加锁读取
支持外键
支持行锁
不支持FULLTEXT类型的索引
不保存表的具体行数，扫描表来计算有多少行
DELETE 表时，是一行一行的删除
InnoDB 把数据和索引存放在表空间里面
跨平台可直接拷贝使用
InnoDB中必须包含AUTO_INCREMENT类型字段的索引
表格很难被压缩

MyISAM：
采用b+树
各子节点存储的是数据的地址
不支持事务，回滚将造成不完全回滚，不具有原子性
不支持外键
不支持外键
支持全文搜索
保存表的具体行数,不带where时，直接返回保存的行数
DELETE 表时，先drop表，然后重建表

如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择
如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。

myisam支持表锁
表锁是开销最小的策略，会锁定整张表，用户对表做写操作时，要先获得写锁，这会阻塞其它用户对该表的所有读写操作
innodb支持行锁
行锁可以最大成都支持并发处理，但也带来了最大的锁开销，它只对指定的记录加锁，其它进程还是可以对同一表中的其它记录进行操作

表级锁速度快，但冲突多，行级锁冲突少，但速度慢。      
