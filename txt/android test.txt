冷启动：当启动应用时，后台没有该应用的进程，这时系统会重新创建一个新的进程分配给该应用，这种启动方式就是冷启动。 
热启动：当启动应用是，后台已有该应用的进程（例：按back键、home键，应用虽然会退出，但是该应用的进程还是保留在后台，
        可进入任务列表中查看），所以在已有进程的情况下，这种启会从已有的进程中来启动应用，这种启动方式就是热启动。
冷启动因为系统会重新创建一个新的进程分配给它，所以会先创建和初始化Application类，再创建和初始化MainActivity类
（包括一系列的测量、布局、绘制），最后显示在界面上。 
热启动因为会从已有的进程中来启动，所以热启动就不会走Application这步了，而是直接走MainActivity
（包括一系列的测量、布局、绘制），所以热启动的过程只需要创建和初始化一个MainActivity就行了，而不必创建和初始化Application.

获取package名和activity名：adb logcat|grep START  然后打开软件，包名和acitvity名在"cmp="的后面
冷启动和热启动的指令是一样的：adb shell am start -W -n package/activity
冷停止：adb shell am force-stop package
热停止：adb shell input keyevent 3  3代表的是back键
thistime可以作为启动的参考值

获取cpu信息
adb shell dumpsys cpuinfo|grep pacaagename    不要超过80%

获取流量
1、获取进程id
adb shell ps|grep packagename
2、获取流量
adb shell cat /proc/pid/net/dev 各网卡流量之和，两次操作之间意味着获取的流量

获取电量
1、切换到非充电状态 adb shell dumpsys battery set status 1 #只要是非2状态就行
2、获取点亮 adb shell dumpsys battery

获取内存
adb shell top         vss虚拟耗用内存 rss实际使用内存

FPS 每秒的帧数，如果一帧的执行时间大于16ms则可以认为有卡顿现象   gpu呈现模式分析，选择在屏幕显示为条形图，绿色的线代表是16ms
过度渲染：屏幕上某个像素在同一真的时间内被绘制了多次   选择显示gpu过度绘制

自动化测试：
appium（需要安装）、android sdk（安卓官网下载然后配置环境变量）、appium-python-client（然后去执行里面的setup.py这个文件）、
selenium、uiautomatorviewer
安卓定位元素
Android里面定位的id一般为resrouce-id
确定设备，使用的是adb devices
安卓sdk自带的uiautomator viewer可以定位元素，这个工具在android-sdk/tools里面，启动，sudo ./uiautomatorviewer
appium控制uiautomator
webdriver.remote("节点地址",desired_caps)可以把app和脚本进行交互
查找到元素id，resrouce-id对应值的id：后面便是真的id值了

想测试，需要启动appium
