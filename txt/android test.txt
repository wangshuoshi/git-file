冷启动：当启动应用时，后台没有该应用的进程，这时系统会重新创建一个新的进程分配给该应用，这种启动方式就是冷启动。 
热启动：当启动应用是，后台已有该应用的进程（例：按back键、home键，应用虽然会退出，但是该应用的进程还是保留在后台，
        可进入任务列表中查看），所以在已有进程的情况下，这种启会从已有的进程中来启动应用，这种启动方式就是热启动。
冷启动因为系统会重新创建一个新的进程分配给它，所以会先创建和初始化Application类，再创建和初始化MainActivity类
（包括一系列的测量、布局、绘制），最后显示在界面上。 
热启动因为会从已有的进程中来启动，所以热启动就不会走Application这步了，而是直接走MainActivity
（包括一系列的测量、布局、绘制），所以热启动的过程只需要创建和初始化一个MainActivity就行了，而不必创建和初始化Application.

获取package名和activity名：adb logcat|grep START  然后打开软件，包名和acitvity名在"cmp="的后面
冷启动和热启动的指令是一样的：adb shell am start -W -n package/activity
冷停止：adb shell am force-stop package
热停止：adb shell input keyevent 3  3代表的是back键
thistime可以作为启动的参考值

获取cpu信息
adb shell dumpsys cpuinfo|grep pacaagename    不要超过80%

获取流量
1、获取进程id
adb shell ps|grep packagename
2、获取流量
adb shell cat /proc/pid/net/dev 各网卡流量之和，两次操作之间意味着获取的流量

获取电量
1、切换到非充电状态 adb shell dumpsys battery set status 1 #只要是非2状态就行
2、获取点亮 adb shell dumpsys battery

获取内存
adb shell top         vss虚拟耗用内存 rss实际使用内存

FPS 每秒的帧数，如果一帧的执行时间大于16ms则可以认为有卡顿现象   gpu呈现模式分析，选择在屏幕显示为条形图，绿色的线代表是16ms
过度渲染：屏幕上某个像素在同一真的时间内被绘制了多次   选择显示gpu过度绘制

自动化测试：love  location定位元素、operation操作元素、verify验证结果、exception处理异常
appium（需要安装）、android sdk（安卓官网下载然后配置环境变量）、appium-python-client（然后去执行里面的setup.py这个文件）、
selenium、uiautomatorviewer
安卓定位元素
Android里面定位的id一般为resrouce-id
确定设备，使用的是adb devices
安卓sdk自带的uiautomator viewer可以定位元素，这个工具在android-sdk/tools里面，启动，sudo ./uiautomatorviewer
appium控制uiautomator
webdriver.remote("节点地址",desired_caps)可以把app和脚本进行交互
查找到元素id，resrouce-id对应值的id：后面便是真的id值了，find_element_by_id()还有find_element_by_accessibility_id()
driver.press_keycode()更快一点，因为其他的需要先去定位然后再去触发，而这个是直接出发硬件 计算机可以直接点击各数字测试，也可以在输入框输入
self.driver.scroll（从一个元素，到另一个元素）两个元素都是刚才find_element定位出来的
self.driver.drag_and_drop(从一个元素，到另一个元素)这个是拖拽，和上面的一样
self.driver.swipe(x,y,x1,y1)起始位置坐标
self.driver.tap（[x,y]）触摸点的位置坐标
self.driver.flick(x,y,x1,y1)快速滑动
self.driver.current_activity输出当前activity的名字
self.driver.wait_activity("名字",3,1)等待3秒钟，每隔1秒检查一次
self.driver.background_app(3)将一个程序置于后台3秒钟
self.driver.is_app_installed("名字")是否安装了
self.driver.remove_app("名字")删除app
self.driver.install_app("名字")安装app
self.driver.launch_app("名字")启动app
self.driver.close_app("名字")关闭app
self.driver.start_activity("包的名字","包下面的activity")启动
self.driver.get_screenshot_as_file("存为什么名字")截屏

想测试，
1、需要启动appium（选择是安卓还是ios），
2、automation name分为appium（基于uiautomator框架）和selendroid（基于Android Instrumentation框架，主要测试混合app）
3、选择安卓版本，然后启动appium

appium是一个跨平台的测试工具，跨架构支持测试native（原生）和hybrid（混合）应用以及webview，支持ios和安卓以及firefoxOS，而且跨语言
在安卓平台，appium是基于uiautomator框架

基于混合型app（hybrid app）
使用selendroid框架，appium来控制selendroid框架
而此时的识别还需要加上chrome inspector页面识别
s-love s是switch上下文切换

这时候在配置appium的时候必须配置app path 因为selendroid需要对app重签名
在脚本里面只是多了一个automationName=selendroid











