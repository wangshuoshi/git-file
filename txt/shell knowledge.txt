modprobe 载入一个模块
insmod 将给定的模块加载到内核中
sync命令则可用来强制将内存缓冲区中的数据立即写入磁盘中

1 echo "666" >> abc.log       >> 代表不覆盖前文的输入    echo也可以直接打印 echo "1"
2 cat >> abc.log << EOF       也会接着上文继续输入  EOF是结束位
> 999
> EOF

cp -pdr /tmp/abc.txt  ~/                         -pdr 会带着源文件的属性一起复制过去
find ~/ -type f -name "abc.*" -exec rm {} \;     -type f是文件 d是目录 -mtime   最好加上路径,否则是在/下找
find ~/ -type f -name "abc.*" |xargs rm -f       -exec 加上要执行的内容，{}代表的就是前面查找的文件，必须要又有 \;
rm -f `find ~/ -type f -name "abc.*"`            先做反引号``里面的内容

cp `find -type f -name "abc.*"` ~/               ``里面的内容会首先执行
grep -v "aaa" test.sh     -v 不包括aaa的行   -A
head/tail -8 test.sh       前/后8行，默认是10行
mkdir -p /tmp/a       -p 连续创建
seq 100 >> a.sh       1-100放入文件里面

sed -n "2,5p" test.sh     没有-n不会生效,p是打印的意思，2-5行
sed -i "s#oldgirl#xiuzhi#g" test.sh     替换 -i是修改文本内容 sg和#必备
sed -i "/oldboy/d" test.sh   从文本删除oldboy这一行    d是删除命令
sed -e "/oldboy/d" test.sh   从输出删除oldboy这一行
sed -n "/oldboy/p" test.sh   查找   -n和p同时出现
sed -i "s#oldgirl#xiuzhi#g" `find ./ -type f -name "tes*"`   先去执行``里面的内容，然后再从头开始运行
find ./ -type f -name "*.sh" | xargs sed -i "s#xiuzhi#oldgirl#g"   xargs把查找到的内容（文件）变为一串
sed -e "/oldboy$/d" a.txt  sed也支持正则表达式
sed -n "/oldboy$/p" a.txt  np是联合使用的
sed -nr "s#(^a*):b.*(A.*)#\1 \2#gp" a.txt  -r是正则表达式

grep -E "^oldboy" a.txt 加上E便可以变成是正则表达式
egrep "^oldboy" a.txt   如果不加E的话就要变成egrep
grep "a\{2,3\}" a.txt 或者是 grep -E "a{2,3}" a.txt
grep -En "^a" a.txt  -n显示行号

head -5 test.sh |tail -4  也可以是这样   |的意思是把前面的流入后面继续执行
awk "NR>1&&NR<6" test.sh  NR是行的意思 因为没有加print，所以可以是双引号“”
awk -F ":" '{print $1}' test.sh    有print的时候一定是'print{$1}'单引号
awk -F ":" 'NR ==3 {print $2}' infrasim.ym

$#	传递到脚本的参数个数
$0  本文件的名称
$*	以一个单字符串显示所有向脚本传递的参数。
如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$@与$*相同,但是使用时加引号,并在引号中返回每个参数。
如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$$	脚本运行的当前进程ID号
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
echo "第十个参数为 ${10} !"  一定要这样写才可以,才能表示第10个数,如果是$10会在屏幕出现10这个数字

value=`expr $a \* $b`    expr用于计算,两个变量之间一定要有空格
echo "a * b : $value"
a=$[2+5]                  一样的效果,不过这个不用空格
echo $a             

if [ $a -lt 5 -o $b -gt 100 ]                  -o、||或  -a、&&与
then
   echo "$a 小于 5 或 $b 大于 100 : 返回 true"
else

if test $num1 = $num2                          用test的不用加[]
then
    echo '两个字符串相等!'
fi                                            if then fi

for var in item1                              for do done 
do
    command1
done

while :                                       while do done
do
    command
done

#!/bin/bash                                 
funthReturn(){
    echo "start..."
    echo "the first:"
    read Num1
    echo "the sceond:"
    read Num2
    echo "they are : $Num1 and $Num2"
    return $[$Num1+$Num2]
}
funthReturn
echo "the result: $? "

read相当于后期传入参数，而$1、$2、$3……是在运行脚本的时候就传入参数
