大富翁f(n) = f(n-1)+f(n-2)+f(n-3)+....+f(1)+f(0)
def numer(n):
    sum = 0
    #用于记录每次分解得到的步数
    if n == 1 or n == 0:
        return 1
    else:
        for i in range(n):# 根据当前n的值，循环n次,将其分解为f(0) + f(1) + ... + f(n-1)
            sum=sum+numer(i)
            return sum

硬币多少种组合
def split_money(n):
    int(a)
    money = [1, 5, 10, 20, 50, 100]
    dp = [0] * (n + 1)
    dp[0] = 1
    for i in money:
        for j in range(1, n+1):
            if j >= i: dp[j] += dp[j-i]
    return dp[n]

两个字符串里面相同且最大的字符串
s1 = input()
s2 = input()
dp = [[0 for _ in range(len(s2)+1)]for _ in range(len(s1)+1)]
print(dp,len(dp))
maxl = 0
for i in range(len(s1)):
    for j in range(len(s2)):
        if s1[i] == s2[j]:
            dp[i+1][j+1] = dp[i][j] + 1
            maxl = max(maxl, dp[i+1][j+1])
print(maxl)

方格向下走有几种走法                          用最简单的方式，然后递归
def rec(x,y):  
    if(x==1)or(y==1):
        return x+y
    else:
        return rec(x-1,y)+rec(x,y-1)
print(rec(3,2))

十进制=二进制幸运数                          二进制是用bin()，可以转化为字符串str来遍历
def f(s):
    ans=0
    for i in s:
        ans+=int(i)
    return ans
def g(s):
    ans=0
    for i in s:
        if i=='1':
            ans+=1
    return ans
res=0
for i in range(1,int(input())+1):
    if g(str(bin(i)))==f(str(i)):
        res+=1
print(res)

身份证分组                                               直接可以用列表切片来处理
import sys
for line in sys.stdin.readlines():
    line=line.replace(' ','').replace('\n','')
    n=len(line)
    if n<=6:
        print(line[:6])
    elif n<=14:
        print(line[:6]+' '+line[6:14])
    else:
        print(line[:6]+' '+line[6:14]+' '+line[14:18])

反转数字
x, y = input().split()
add = int(x[::-1]) + int(y[::-1])                         用步长还有字符串转成数字
print(int(str(add)[::-1]))

分苹果                                                    先用小的来分，然后再用大的来分，别忘了range范围要+1
def count(n):
  if n == 6 or n == 8:
    return 1
  elif n >= 8:
    sum = n
    for i in range(0, int(n / 6) + 1):
      j = (n - 6 * i) / 8
      if j in range(0, int(n / 8) + 1) and (i + j) < sum:
        sum = i + j
    if int(sum) != n:
      return int(sum)
  return -1

解决x+x平方的问题                                          公式而已
import math
h=int(input())
x = math.sqrt((4*h+1)/4) - 0.5
print(math.floor(x))

删除公共字符串                                             通过遍历，replace是会生成一个新的字符串
alist1=input()
alist2=input()
for i in alist2:
    try:
        alist1=alist1.replace(alist1[alist1.index(i)],'')
    except Exception:
        continue
print(alist1)

互相加减                                                通过观察数据来判断
i1, i2, i3, i4 = map(int, input().split())
a = (i1 + i3) // 2 if (i1 + i3) % 2 == 0 and (i1 + i3) >= 0 else None
b = (i2 + i4) // 2 if (i2 + i4) % 2 == 0 and (i2 + i4) >= 0 else None
print(" ".join(map(str, [a, b, i4 - b])) if isinstance(a, int) and isinstance(b, int) else "No")

无重复字符串
class Solution:
    def lengthOfLongestSubstring(self, s):
        res = 0
        if s is None or len(s) == 0:
            return res
        d = {}
        tmp = 0
        start = 0
        for i in range(len(s)):
            if s[i] in d and d[s[i]] >= start:
                start = d[s[i]] + 1
            tmp = i - start + 1
            d[s[i]] = i
            res = max(res, tmp)
        return res
print(Solution().lengthOfLongestSubstring("abcabcbb"))

二维数组比大小
class Solution:
    def Find(self, target, array):
        rows = len(array) - 1
        cols= len(array[0]) - 1
        i = rows        
        j = 0
        while j<=cols and i>=0:
            if target<array[i][j]:
                i -= 1
            elif target>array[i][j]:
                j += 1
            else:
                return True
        return False
